commit 3afbfc4913db988b29f9aa6879b7501321e448d4
Author: Alan Coopersmith <alan.coopersmith@oracle.com>
Date:   Mon Sep 16 21:47:16 2013 -0700

    Avoid use-after-free in dix/dixfonts.c: doImageText()
    
    Save a pointer to the passed in closure structure before copying it
    and overwriting the *c pointer to point to our copy instead of the
    original.  If we hit an error, once we free(c), reset c to point to
    the original structure before jumping to the cleanup code that
    references *c.
    
    Since one of the errors being checked for is whether the server was
    able to malloc(c->nChars * itemSize), the client can potentially pass
    a number of characters chosen to cause the malloc to fail and the
    error path to be taken, resulting in the read from freed memory.
    
    Since the memory is accessed almost immediately afterwards, and the
    X server is mostly single threaded, the odds of the free memory having
    invalid contents are low with most malloc implementations when not using
    memory debugging features, but some allocators will definitely overwrite
    the memory there, leading to a likely crash.
    
    Reported-by: Pedro Ribeiro <pedrib@gmail.com>
    Signed-off-by: Alan Coopersmith <alan.coopersmith@oracle.com>
    Reviewed-by: Julien Cristau <jcristau@debian.org>

Index: xorg-server-1.11.4/dix/dixfonts.c
===================================================================
--- xorg-server-1.11.4.orig/dix/dixfonts.c	2013-10-16 07:29:03.136402363 -0400
+++ xorg-server-1.11.4/dix/dixfonts.c	2013-10-16 07:30:48.420405058 -0400
@@ -1479,6 +1479,7 @@
 	    GC *pGC;
 	    unsigned char *data;
 	    ITclosurePtr new_closure;
+	    ITclosurePtr old_closure;
 
 	    /* We're putting the client to sleep.  We need to
 	       save some state.  Similar problem to that handled
@@ -1491,6 +1492,7 @@
 		err = BadAlloc;
 		goto bail;
 	    }
+	    old_closure = c;
 	    *new_closure = *c;
 	    c = new_closure;
 
@@ -1498,6 +1500,7 @@
 	    if (!data)
 	    {
 		free(c);
+		c = old_closure;
 		err = BadAlloc;
 		goto bail;
 	    }
@@ -1509,6 +1512,7 @@
 	    {
 		free(c->data);
 		free(c);
+		c = old_closure;
 		err = BadAlloc;
 		goto bail;
 	    }
@@ -1522,6 +1526,7 @@
 		FreeScratchGC(pGC);
 		free(c->data);
 		free(c);
+		c = old_closure;
 		err = BadAlloc;
 		goto bail;
 	    }
