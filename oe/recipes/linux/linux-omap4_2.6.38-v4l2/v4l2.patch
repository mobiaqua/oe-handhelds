From 0684a6c9cb9d594ed9064f101c29b777862832dd Mon Sep 17 00:00:00 2001
From: Pawel Kolodziejski <aquadran@users.sourceforge.net>
Date: Wed, 7 Dec 2011 16:07:43 +0100
Subject: [PATCH] - rebase against dss2 - fixed hdmi flipping - allow crop
 while stream on - re-attach managers for overlays - use all
 overlays except gfx overlay

---
 drivers/media/video/omap/Kconfig        |    2 +-
 drivers/media/video/omap/omap_vout.c    |  182 ++++++++++++++++++------------
 drivers/media/video/omap/omap_voutdef.h |    4 +-
 3 files changed, 112 insertions(+), 76 deletions(-)

diff --git a/drivers/media/video/omap/Kconfig b/drivers/media/video/omap/Kconfig
index 390ab09..2c37b3f 100644
--- a/drivers/media/video/omap/Kconfig
+++ b/drivers/media/video/omap/Kconfig
@@ -3,7 +3,7 @@ config VIDEO_OMAP2_VOUT_VRFB
 
 config VIDEO_OMAP2_VOUT
 	tristate "OMAP2/OMAP3 V4L2-Display driver"
-	depends on ARCH_OMAP2 || ARCH_OMAP3
+	depends on ARCH_OMAP2 || ARCH_OMAP3 || ARCH_OMAP4
 	select VIDEOBUF_GEN
 	select VIDEOBUF_DMA_CONTIG
 	select OMAP2_DSS
diff --git a/drivers/media/video/omap/omap_vout.c b/drivers/media/video/omap/omap_vout.c
index 5fdad48..c041af2 100644
--- a/drivers/media/video/omap/omap_vout.c
+++ b/drivers/media/video/omap/omap_vout.c
@@ -42,7 +42,7 @@
 #include <media/v4l2-device.h>
 #include <media/v4l2-ioctl.h>
 
-#include <plat/display.h>
+#include <video/omapdss.h>
 
 #include "omap_voutlib.h"
 #include "omap_voutdef.h"
@@ -366,6 +366,7 @@ static int video_mode_to_dss_mode(struct omap_vout_device *vout)
 
 	switch (pix->pixelformat) {
 	case 0:
+		mode = -EINVAL;
 		break;
 	case V4L2_PIX_FMT_YUYV:
 		mode = OMAP_DSS_COLOR_YUV2;
@@ -570,6 +571,40 @@ int omapvid_apply_changes(struct omap_vout_device *vout)
 	return 0;
 }
 
+static int _program_cur(struct omap_vout_device *vout)
+{
+	int ret;
+	u32 addr = (unsigned long)vout->queued_buf_addr[vout->cur_frm->i] + vout->cropped_offset;
+	u32 uv_addr = (unsigned long)vout->queued_buf_uv_addr[vout->cur_frm->i] + vout->cropped_uv_offset;
+
+	/* First save the configuration in overlay structure */
+	ret = omapvid_init(vout, addr, uv_addr);
+	if (ret) {
+		printk(KERN_ERR VOUT_NAME "failed to set overlay info\n");
+		return ret;
+	}
+	/* Enable the pipeline and set the Go bit */
+	ret = omapvid_apply_changes(vout);
+	if (ret)
+		printk(KERN_ERR VOUT_NAME "failed to change mode\n");
+
+	return ret;
+}
+
+static struct videobuf_buffer *_get_next_frm(struct omap_vout_device *vout)
+{
+	struct videobuf_buffer *frm;
+
+	if (list_empty(&vout->dma_queue))
+		return NULL;
+
+	frm = list_entry(vout->dma_queue.next, struct videobuf_buffer, queue);
+
+	list_del(&frm->queue);
+
+	return frm;
+}
+
 void omap_vout_isr(void *arg, unsigned int irqstatus)
 {
 	int ret;
@@ -630,11 +665,6 @@ void omap_vout_isr(void *arg, unsigned int irqstatus)
 		if (ret)
 			printk(KERN_ERR VOUT_NAME "failed to change mode\n");
 	} else {
-
-		if (vout->first_int) {
-			vout->first_int = 0;
-			goto vout_isr_err;
-		}
 		if (irqstatus & DISPC_IRQ_EVSYNC_ODD)
 			fid = 1;
 		else if (irqstatus & DISPC_IRQ_EVSYNC_EVEN)
@@ -643,49 +673,18 @@ void omap_vout_isr(void *arg, unsigned int irqstatus)
 			goto vout_isr_err;
 
 		vout->field_id ^= 1;
-		if (fid != vout->field_id) {
-			if (0 == fid)
-				vout->field_id = fid;
-
-			goto vout_isr_err;
-		}
 		if (0 == fid) {
-			if (vout->cur_frm == vout->next_frm)
-				goto vout_isr_err;
-
-			vout->cur_frm->ts = timevalue;
-			vout->cur_frm->state = VIDEOBUF_DONE;
-			wake_up_interruptible(&vout->cur_frm->done);
-			vout->cur_frm = vout->next_frm;
-		} else if (1 == fid) {
-			if (list_empty(&vout->dma_queue) ||
-					(vout->cur_frm != vout->next_frm))
-				goto vout_isr_err;
-
-			vout->next_frm = list_entry(vout->dma_queue.next,
-					struct videobuf_buffer, queue);
-			list_del(&vout->next_frm->queue);
-
-			vout->next_frm->state = VIDEOBUF_ACTIVE;
-			addr = (unsigned long)
-				vout->queued_buf_addr[vout->next_frm->i] +
-				vout->cropped_offset;
-
-			uv_addr = (unsigned long)vout->queued_buf_uv_addr[vout->next_frm->i]
-				+ vout->cropped_uv_offset;
-
-			/* First save the configuration in ovelray structure */
-			ret = omapvid_init(vout, addr, uv_addr);
-			if (ret)
-				printk(KERN_ERR VOUT_NAME
-						"failed to set overlay info\n");
-			/* Enable the pipeline and set the Go bit */
-			ret = omapvid_apply_changes(vout);
-			if (ret)
-				printk(KERN_ERR VOUT_NAME
-						"failed to change mode\n");
+			if (vout->cur_frm) {
+				vout->cur_frm->ts = timevalue;
+				vout->cur_frm->state = VIDEOBUF_DONE;
+				wake_up_interruptible(&vout->cur_frm->done);
+			}
 		}
-
+		vout->cur_frm = _get_next_frm(vout);
+		if (!vout->cur_frm)
+			goto vout_isr_err;
+		vout->cur_frm->state = VIDEOBUF_ACTIVE;
+		_program_cur(vout);
 	}
 
 vout_isr_err:
@@ -1299,9 +1298,6 @@ static int vidioc_s_crop(struct file *file, void *fh, struct v4l2_crop *crop)
 	struct omap_overlay *ovl;
 	struct omap_video_timings *timing;
 
-	if (vout->streaming)
-		return -EBUSY;
-
 	mutex_lock(&vout->lock);
 	ovid = &vout->vid_info;
 	ovl = ovid->overlays[0];
@@ -1325,6 +1321,13 @@ static int vidioc_s_crop(struct file *file, void *fh, struct v4l2_crop *crop)
 		ret = omap_vout_new_crop(&vout->pix, &vout->crop, &vout->win,
 				&vout->fbuf, &crop->c);
 
+	if (vout->streaming) {
+		if (omap_vout_calculate_offset(vout)) {
+			ret = -EINVAL;
+			goto s_crop_err;
+		}
+	}
+
 s_crop_err:
 	mutex_unlock(&vout->lock);
 	return ret;
@@ -1605,7 +1608,7 @@ static bool is_connected(struct omap_overlay_manager *mgr)
 		 * it is a permanently connected device (like an LCD panel)
 		 * as opposed to a pluggable device (like HDMI or DVI)
 		 */
-		if (dssdrv->is_detected && !dssdrv->is_detected(dssdev))
+		if (dssdrv->is_detected && !dssdrv->is_detected(dssdev, false))
 			return false;
 		return true;
 	}
@@ -2025,7 +2028,7 @@ static int __init omap_vout_create_video_devices(struct platform_device *pdev)
 	struct omap2video_device *vid_dev = container_of(v4l2_dev,
 			struct omap2video_device, v4l2_dev);
 
-	for (k = 0; k < pdev->num_resources; k++) {
+	for (k = 0; k < vid_dev->num_overlays; k++) {
 
 		vout = kzalloc(sizeof(struct omap_vout_device), GFP_KERNEL);
 		if (!vout) {
@@ -2036,12 +2039,7 @@ static int __init omap_vout_create_video_devices(struct platform_device *pdev)
 		vout->vid = k;
 		vid_dev->vouts[k] = vout;
 		vout->vid_dev = vid_dev;
-		/* Select video2 if only 1 overlay is controlled by V4L2 */
-		if (pdev->num_resources == 1)
-			vout->vid_info.overlays[0] = vid_dev->overlays[k + 2];
-		else
-			/* Else select video1 and video2 one by one. */
-			vout->vid_info.overlays[0] = vid_dev->overlays[k + 1];
+		vout->vid_info.overlays[0] = vid_dev->overlays[k];
 		vout->vid_info.num_overlays = 1;
 		vout->vid_info.id = k + 1;
 
@@ -2094,7 +2092,7 @@ error:
 success:
 		dev_info(&pdev->dev, ": registered and initialized"
 				" video device %d\n", vfd->minor);
-		if (k == (pdev->num_resources - 1))
+		if (k == (vid_dev->num_overlays - 1))
 			return 0;
 	}
 
@@ -2147,7 +2145,7 @@ static int omap_vout_remove(struct platform_device *pdev)
 			omap2video_device, v4l2_dev);
 
 	v4l2_device_unregister(v4l2_dev);
-	for (k = 0; k < pdev->num_resources; k++)
+	for (k = 0; k < vid_dev->num_overlays; k++)
 		omap_vout_cleanup_device(vid_dev->vouts[k]);
 
 	for (k = 0; k < vid_dev->num_displays; k++) {
@@ -2162,11 +2160,12 @@ static int omap_vout_remove(struct platform_device *pdev)
 
 static int __init omap_vout_probe(struct platform_device *pdev)
 {
-	int ret = 0, i;
-	struct omap_overlay *ovl;
+	int ret = 0, i, r, id_mgr;
+	struct omap_overlay *ovl, *gfx_ovl;
 	struct omap_dss_device *dssdev = NULL;
 	struct omap_dss_device *def_display;
 	struct omap2video_device *vid_dev = NULL;
+	struct omap_overlay_manager *mgr, *old_mgr;
 
 	if (pdev->num_resources == 0) {
 		dev_err(&pdev->dev, "probed for an unknown device\n");
@@ -2189,20 +2188,49 @@ static int __init omap_vout_probe(struct platform_device *pdev)
 		goto probe_err0;
 	}
 
-	vid_dev->num_overlays = omap_dss_get_num_overlays();
-	for (i = 0; i < vid_dev->num_overlays; i++)
-		vid_dev->overlays[i] = omap_dss_get_overlay(i);
-
 	vid_dev->num_managers = omap_dss_get_num_overlay_managers();
 	for (i = 0; i < vid_dev->num_managers; i++)
 		vid_dev->managers[i] = omap_dss_get_overlay_manager(i);
 
-	/* Get the Video1 overlay and video2 overlay.
-	 * Setup the Display attached to that overlays
-	 */
-	for (i = 1; i < vid_dev->num_overlays; i++) {
+	gfx_ovl = omap_dss_get_overlay(0);
+	if (!gfx_ovl->manager) {
+		dev_err(&pdev->dev, "no manager for overlay 0\n");
+		ret = -EINVAL;
+		goto probe_err0;
+	}
+
+	vid_dev->num_overlays = 0;
+	id_mgr = gfx_ovl->manager->id;
+	mgr = omap_dss_get_overlay_manager(id_mgr);
+
+	for (i = 1; i < omap_dss_get_num_overlays(); i++) {
 		ovl = omap_dss_get_overlay(i);
-		if (ovl->manager && ovl->manager->device) {
+		if (mgr == ovl->manager)
+			goto next;
+		old_mgr = ovl->manager;
+		if (old_mgr) {
+			r = ovl->unset_manager(ovl);
+			if (r) {
+				dev_err(&pdev->dev, "dettach error: ovl->name %s\n", ovl->name);
+				continue;
+			}
+			r = old_mgr->apply(old_mgr);
+			if (r) {
+				dev_err(&pdev->dev, "apply error: old_mgr->name %s\n", old_mgr->name);
+				continue;
+			}
+		}
+		r = ovl->set_manager(ovl, mgr);
+		if (r) {
+			dev_err(&pdev->dev, "attach error: ovl->name %s, mgr->name %s\n", ovl->name, mgr->name);
+			continue;
+		}
+		r = mgr->apply(mgr);
+		if (r) {
+			dev_err(&pdev->dev, "apply error: mgr->name %s\n", mgr->name);
+			continue;
+		}
+		if (ovl->manager->device) {
 			def_display = ovl->manager->device;
 		} else {
 			dev_warn(&pdev->dev, "cannot find display\n");
@@ -2234,9 +2262,17 @@ static int __init omap_vout_probe(struct platform_device *pdev)
 					dssdrv->set_update_mode(def_display,
 							OMAP_DSS_UPDATE_AUTO);
 			}
+next:
+			vid_dev->overlays[vid_dev->num_overlays++] = ovl;
 		}
 	}
 
+	if (vid_dev->num_overlays == 0) {
+		dev_err(&pdev->dev, "no free video overlays\n");
+		ret = -ENODEV;
+		goto probe_err0;
+	}
+
 	if (v4l2_device_register(&pdev->dev, &vid_dev->v4l2_dev) < 0) {
 		dev_err(&pdev->dev, "v4l2_device_register failed\n");
 		ret = -ENODEV;
@@ -2260,9 +2296,9 @@ static int __init omap_vout_probe(struct platform_device *pdev)
 probe_err2:
 	v4l2_device_unregister(&vid_dev->v4l2_dev);
 probe_err1:
-	for (i = 1; i < vid_dev->num_overlays; i++) {
+	for (i = 0; i < vid_dev->num_overlays; i++) {
 		def_display = NULL;
-		ovl = omap_dss_get_overlay(i);
+		ovl = vid_dev->overlays[i];
 		if (ovl->manager && ovl->manager->device)
 			def_display = ovl->manager->device;
 
diff --git a/drivers/media/video/omap/omap_voutdef.h b/drivers/media/video/omap/omap_voutdef.h
index a8fb5e5..ecbe069 100644
--- a/drivers/media/video/omap/omap_voutdef.h
+++ b/drivers/media/video/omap/omap_voutdef.h
@@ -11,7 +11,7 @@
 #ifndef OMAP_VOUTDEF_H
 #define OMAP_VOUTDEF_H
 
-#include <plat/display.h>
+#include <video/omapdss.h>
 #include <plat/vrfb.h>
 
 #include "omap_voutlib.h"
@@ -25,7 +25,7 @@
 #define RGB_VRFB_BPP    1
 #define MAX_CID		3
 #define MAC_VRFB_CTXS	4
-#define MAX_VOUT_DEV	2
+#define MAX_VOUT_DEV	3
 #define MAX_OVLS	3
 #define MAX_DISPLAYS	3
 #define MAX_MANAGERS	3
-- 
1.7.5.4

